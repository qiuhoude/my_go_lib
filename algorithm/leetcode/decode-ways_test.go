package leetcode

import (
	"testing"
)

// 91. 解码方法 https://leetcode-cn.com/problems/decode-ways/

/*
一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：

'A' -> 1
'B' -> 2
...
'Z' -> 26
要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：

"AAJF" ，将消息分组为 (1 1 10 6)
"KJF" ，将消息分组为 (11 10 6)
注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
题目数据保证答案肯定是一个 32 位 的整数。

输入：s = "12"
输出：2
解释：它可以解码为 "AB"（1 2）或者 "L"（12）。

输入：s = "226"
输出：3
解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。

输入：s = "0"
输出：0
解释：没有字符映射到以 0 开头的数字。
含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。

输入：s = "06"
输出：0
解释："06" 不能映射到 "F" ，因为字符串含有前导 0（"6" 和 "06" 在映射中并不等价）。

1 <= s.length <= 100
s 只包含数字，并且可能包含前导零。

思路:
自顶向下的思想: 字符串长度为n, 求到 n 的有多少种方法, 就要(n-1)有多少方法 和 （n-2) 有多少方法
其中遇到 '0' 必须跟前的数字结合能单独存在
自底向上, i 种方法 = (i-1) 方法 + (i-2)方法,  如i位置是0并且于i-1的位置结合不能构成单词说明无解
*/

func numDecodings(s string) int {
	n := len(s)
	dp := make([]int, n+1)
	dp[0] = 1
	for i := 1; i <= n; i++ {
		if s[i-1] != '0' { // 当前不是 '0'
			dp[i] += dp[i-1]
		}
		if i > 1 && s[i-2] != '0' && ((s[i-2]-'0')*10+(s[i-1]-'0') <= 26) { //
			dp[i] += dp[i-2]
		}
	}
	return dp[n]
}

func Test_numDecodings(t *testing.T) {
	tests := []struct {
		arg      string
		expected int
	}{
		{"2101", 1},
		{"2", 1},
		{"12", 2},
		{"06", 0},
		{"262", 3},
		{"10", 1},
		{"1123", 5},
	}
	for _, tt := range tests {
		if got := numDecodings(tt.arg); got != tt.expected {
			t.Errorf("numDecodings(%v) => got=%v  expected=%v", tt.arg, got, tt.expected)
		}
	}
}
